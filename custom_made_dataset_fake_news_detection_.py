# -*- coding: utf-8 -*-
"""Custom made dataset fake news detection .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVDe9rDW2rOgTQxv8_41G9sd3WBInOLu

INSTALLING KAGGLE AND DOWNLOADING DATASET
"""

! pip install kaggle

from google.colab import drive
drive.mount('/content/drive')

! mkdir ~/.kaggle

! cp /content/drive/MyDrive/Kaggle_API/kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download abri08/real-time-news

! unzip real-time-news.zip

"""IMPORTING DEPENDENCIES"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in English
print(stopwords.words('english'))

"""DATA PREPROCESSING

About the Dataset:

1. id: unique id for a news article
2. title: the title of a news article
3. author: author of the news article
4. text: the text of the article; could be incomplete
5. label: a label that marks whether the news article is real or fake:
           1: Fake news
           0: real News
"""

import pandas as pd

# loading the dataset to a pandas DataFrame
news_dataset = pd.read_csv('/content/real_time_news_dataset.csv')

"""Checking rows and column of dataset"""

news_dataset.shape

# print the first 5 rows of the dataframe
news_dataset.head()

# counting the number of missing values in the dataset
news_dataset.isnull().sum()

# merging the author name and news title
news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

# separating the data & label
X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

print(X)
print(Y)

"""STEMMING"""

from nltk.stem.porter import PorterStemmer

import re

from nltk.corpus import stopwords

import nltk
nltk.download('stopwords')

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

"""UPLOAD ALL THIS TO CONTENT COLUMN"""

news_dataset['content'] = news_dataset['content'].apply(stemming)

"""PRINT AND THEN WE WILL SEE THAT CONTENT ARE IN LOWER CASE"""

print(news_dataset['content'])

#separating the data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

"""CONVERTING CONTENT INTO MEANINGFUL NUMBERS AS COMPUTER ONLY UNDERSTANT DIGITS"""

from sklearn.feature_extraction.text import TfidfVectorizer

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""SPLITTING THE DATASET TO TRAINING AND TESTING DATA"""

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.5, stratify=Y, random_state=2)

"""TRAINING THE MODEL : LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train, Y_train)

"""EVALUATION

ACCURACY SCORE
"""

from sklearn.metrics import accuracy_score

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""MAKING A PREDICTIVE SYSTEM"""

X_new = X_test[2]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

print(Y_test[0])